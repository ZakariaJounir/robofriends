{"version":3,"sources":["components/Card.js","components/CardsList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardsList","robots","cardsArray","map","robot","i","SearchBox","searchFeild","searchChang","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","event","searchfeild","target","value","fetch","then","Response","json","users","filterRobots","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAWeA,EATF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACnB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,YAAYC,IAAG,+BAA0BL,EAA1B,cACxB,6BAAKC,IACL,4BAAIC,QCODI,EAVG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACVC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GAClC,OAAO,cAAC,EAAD,CAAyBX,GAAIO,EAAOI,GAAGX,GAAIC,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,OAAvEK,EAAOI,GAAGX,OAE/B,OACI,8BACKQ,KCDEI,EAPG,SAAC,GAAiC,EAA/BC,YAAgC,IAAlBC,EAAiB,EAAjBA,YAC/B,OACI,qBAAKX,UAAU,MAAf,SACI,uBAAOH,GAAG,UAAUG,UAAU,mBAAmBY,KAAK,SAASd,KAAK,OAAOe,YAAY,aAAaC,SAAUH,OCK3GI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,mBAAoBC,OAAO,SAArE,SACKJ,EAAMK,YCkBJC,E,kDAnBX,WAAYN,GAAO,IAAD,8BACd,gBACKO,MAAQ,CACTC,UAAW,GAHD,E,qDAOlB,WACIC,KAAKC,SAAS,CAACF,UAAW,M,oBAG9B,WACI,OAAGC,KAAKF,MAAMC,SACH,2DAEAC,KAAKT,MAAMK,a,GAjBFM,aC6CbC,E,kDAvCX,aAAc,IAAD,8BACT,gBAOJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAPxC,EAAKV,MAAQ,CACTnB,OAAO,GACP2B,YAAY,IAJP,E,qDAab,WAAoB,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACtB,OAAOkC,S,oBAIzC,WAAS,IAAD,OACEC,EAAed,KAAKF,MAAMnB,OAAOoC,QAAO,SAAApC,GAC1C,OAAOA,EAAON,KAAK2C,cAAcC,SAAS,EAAKnB,MAAMQ,gBAGzD,OACA,sBAAK/B,UAAU,MAAf,UACI,oBAAIA,UAAU,KAAd,2BACA,cAAC,EAAD,CAAWW,YAAec,KAAKI,iBAC/B,cAAC,EAAD,UACI,cAAC,EAAD,UACA,cAAC,EAAD,CAAWzB,OAAQmC,e,GAjCjBZ,aCMHgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,8BACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.545df698.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({id,name,email}) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"robot pic\" src={`https://robohash.org/${id}?200x200`}></img>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst CardsList = ({robots}) => {\r\n    const cardsArray = robots.map((robot,i) => {\r\n       return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    })\r\n    return(\r\n        <div>\r\n            {cardsArray}\r\n       </div>\r\n    )\r\n}\r\nexport default CardsList;","import React from \"react\";\r\n\r\nconst SearchBox = ( {searchFeild , searchChang}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input id=\"searchB\" className=\"pa3 ba b--green \" type=\"search\" name=\"user\" placeholder=\"robot name\" onChange={searchChang}/>\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: \"scroll\" ,border: \" 1px solid black\", height:\"580px\"}}>\r\n            {props.children}\r\n        </div>\r\n    )       \r\n}\r\n\r\nexport default Scroll;","import React , {Component} from \"react\";\r\n\r\nclass ErrorBoundary extends Component{\r\n\r\n    constructor(props){\r\n        super()\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(){\r\n        this.setState({hasError : true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError)\r\n            return <h1>Oops Somthing Went Wrong!</h1>\r\n        else\r\n            return this.props.children;\r\n    }\r\n\r\n} \r\nexport default ErrorBoundary;","import React, { Component } from \"react\";\r\nimport CardsList from \"../components/CardsList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\n\r\nclass App extends Component {\r\n    \r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots:[],\r\n            searchfeild:\"\"\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfeild:event.target.value})\r\n        \r\n    }\r\n    \r\n    componentDidMount(){\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(Response => Response.json())\r\n        .then(users => this.setState({robots:users}))\r\n    }\r\n\r\n\r\n    render(){\r\n        const filterRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfeild);\r\n         })\r\n\r\n        return(\r\n        <div className=\"tc \">\r\n            <h1 className=\"tc\">Robot Friends</h1>\r\n            <SearchBox searchChang = {this.onSearchChange} />\r\n            <Scroll>\r\n                <ErrorBoundary>\r\n                <CardsList robots={filterRobots} />\r\n                </ErrorBoundary>\r\n            </Scroll>\r\n        </div>        \r\n        )\r\n\r\n    }\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport \"tachyons\";\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div>\r\n      <App />\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}